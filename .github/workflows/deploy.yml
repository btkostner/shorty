---

name: Deploy

on:
  push:
    branches:
      - main

jobs:
  Test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: '22.2'
          elixir-version: '1.12.2'

      - name: Cache
        uses: actions/cache@v2
        id: cache
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/mix.lock') }}-test
          restore-keys: ${{ runner.os }}-${{ hashFiles('**/mix.lock') }}
          path: |
            _build
            deps

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Run Tests
        run: mix test
        env:
          # DB_HOST: postgres
          DB_PORT: ${{ job.services.postgres.ports[5432] }}

  Format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: '22.2'
          elixir-version: '1.12.2'

      - name: Install Dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Run Formatter
        run: mix format --check-formatted

  Dialyzer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: '22.2'
          elixir-version: '1.12.2'

      - name: Cache
        uses: actions/cache@v2
        id: cache
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/mix.lock') }}-dialyzer
          restore-keys: ${{ runner.os }}-${{ hashFiles('**/mix.lock') }}
          path: |
            _build
            deps
            priv/plts

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Run Dialyzer
        run: mix dialyzer

  Credo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: '22.2'
          elixir-version: '1.12.2'

      - name: Cache
        uses: actions/cache@v2
        id: cache
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/mix.lock') }}-credo
          restore-keys: ${{ runner.os }}-${{ hashFiles('**/mix.lock') }}
          path: |
            _build
            deps

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Run Credo
        run: mix credo

  Publish:
    runs-on: ubuntu-latest
    needs:
      - Test
      - Format
      - Dialyzer
      - Credo

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
